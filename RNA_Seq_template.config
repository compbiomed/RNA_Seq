// Configuration file for RNA-seq Nextflow pipeline ////////////////////////////

// Run-specific variables //////////////////////////////////////////////////////

// Full path to input tab-delimited file describing FASTQ files
params.infile = ""
// Full path to Nextflow run directory
params.output_dir = ""
// Prefix used to label output files
params.prefix = ""

// Genomic parameters
// Set as specified below, depending on the species being analyzed
params.genome = [
  species: "",           // e.g., "Homo sapiens" or "Mus musculus"
  ucsc: "",              // e.g., "hg38"         or "mm10"
  assembly: "",          // e.g., "GRCh38"       or "GRCm38"
  set: "base_random",    // e.g., "base", "base_random", "base_random_althap"
  ensembl: 100           // e.g., 100
]

// Sequencing parameters
params.read_length = 51
params.paired_end = true
params.stranded = true

// Global variables that may be changed as needed (rare) ///////////////////////

// Biomart parameters
params.biomart = [
  // Array of Ensembl mirrors to be used for Biomart calls;
  // if the first one is down, it will fail over to the next, and so on
  mirrors: ["useast.ensembl.org", "uswest.ensembl.org", "www.ensembl.org"],
  // Set of attributes for retrieving annotation in biomaRt,
  // named with variable names to be used in SummarizedExperiment;
  // some attributes are species-dependent or Ensembl-build-dependent
  attributes: [
    gene: [
      "ensembl_gene_id",
      "gene_biotype", "description", "band", "transcript_count",
      (params.genome.species == "Homo sapiens") ? "hgnc_symbol" :
        (params.genome.species == "Mus musculus") ? "mgi_symbol" :
        "external_gene_name",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_gene_name" : "external_gene_id",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_gene_source" : "external_gene_db",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 96) ?
        "entrezgene_id" : "entrezgene"
    ],
    isoform: [
      "ensembl_transcript_id", "ensembl_gene_id",
      "gene_biotype", "transcript_biotype", "description", "band",
      (params.genome.species == "Homo sapiens") ? "hgnc_symbol" :
        (params.genome.species == "Mus musculus") ? "mgi_symbol" :
        "external_gene_name",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_gene_name" : "external_gene_id",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_gene_source" : "external_gene_db",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 96) ?
        "entrezgene_id" : "entrezgene",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_transcript_name" : "external_transcript_id",
      (params.genome.ensembl == 'GRCh37' || params.genome.ensembl > 76) ?
        "external_transcript_source_name" : "transcript_db_name"
    ]
  ]
]

// Other global variables; do not edit unless necessary! ///////////////////////

// Paths
CBMHIVE_PATH = "/restricted/projectnb/cbmhive"
REF_PATH = "${CBMHIVE_PATH}/references"

// URLs
params.urls = [
  ensembl_base_url: "ftp://anonymous@ftp.ensembl.org/pub",
  ucsc_base_url:    "https://hgdownload.soe.ucsc.edu"
]
params.urls.ucsc_app_url =
  "${params.urls.ucsc_base_url}/admin/exe/linux.x86_64"

// Software parameters
params.wget = "wget --no-check-certificate"

// Module versions
// Specifying the module name with no version uses the default module
params.modules = [
  fastqc:   "fastqc/0.11.7",
  htslib:   "htslib/1.16",
  multiqc:  "multiqc/1.12",
  python2:  "python2/2.7.16",
  python3:  "python3/3.8.10",
  R:        "R/4.1.2",
  rsem:     "rsem/1.3.1",
  rseqc:    "rseqc/3.0.0",
  samtools: "samtools/1.10",
  star:     "star/2.7.9a"
]

// STAR parameters
params.STAR = [
  genomeDir:
    (params.genome.ucsc != null && params.genome.ucsc != "") ?
      new File(
        "${REF_PATH}/STAR/${params.modules.star.replace("star/", "")}",
        "${params.genome.ucsc}/${params.genome.set}/"
      ) :
      new File(
        "${REF_PATH}/STAR/${params.modules.star.replace("star/", "")}",
        "${params.genome.assembly}/${params.genome.set}/"
      ),
  outFilterMultimapNmax: 20,
  limitSjdbInsertNsj: 5000000
]

// Genome reference FASTA file
params.ref_fasta =
  (params.genome.ucsc != null && params.genome.ucsc != "") ?
    new File(
      "${REF_PATH}/ucsc/${params.genome.ucsc}/${params.genome.set}",
      "${params.genome.ucsc}.fa"
    ) :
    new File(
      "${REF_PATH}/${params.genome.assembly}/${params.genome.set}",
      "${params.genome.assembly}.fa"
    )    

// Infer project used for SGE cluster from path of input file
PROJECT = params.output_dir.
  replaceAll(/^\/(restricted\/|r)?project(nb2?)?\//, "").split("/")[0]
// SGE qsub flags
UNIVERSAL_QFLAGS = "-V -P ${PROJECT} -l scratch=10G"
DEFAULT_QFLAGS = "${UNIVERSAL_QFLAGS} -l h_rt=24:00:00"
LONGRUN_QFLAGS = "${UNIVERSAL_QFLAGS} -l h_rt=48:00:00"

// The default concurrency limit on SCC is 1000 slots
executor {
  name = 'sge'
  queueSize = 1000
}

process {
  // Cluster parameters across all processes
  // All processes are run in scratch space to reduce load on GPFS
  scratch = true
  // No sense in terminating the entire pipeline if one job crashes
  errorStrategy = 'finish'

  // Cluster parameters specific to each process
  withName: createSE {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: generateBED {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: generateGTF {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runFastQC {
    clusterOptions =
      "${DEFAULT_QFLAGS} -l mem_total=1G -pe omp ${params.paired_end ? 2 : 1}"
  }
  withName: runMultiQCFastq {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runMultiQCSample {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=1G"
  }
  withName: runRSEMcalculateExpression {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G -pe omp 8"
  }
  withName: runRSEMprepareReference {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G -pe omp 8"
  }
  withName: runRSeQCbamStat {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCclippingProfile {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCdeletionProfile {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCgeneBodyCoverage {
    clusterOptions = "${LONGRUN_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCinferExperiment {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCinnerDistance {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCinsertionProfile {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCjunctionAnnotation {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCjunctionSaturation {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCreadDistribution {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCreadDuplication {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCreadGC {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCreadNVC {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCreadQuality {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_total=125G"
  }
  withName: runRSeQCtin {
    clusterOptions = "${LONGRUN_QFLAGS} -l mem_total=125G"
  }
  withName: runSTAR1pass {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G -pe omp 8"
  }
  withName: runSTAR2pass {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G -pe omp 8"
  }
  withName: runSTARgenomeGenerate {
    clusterOptions = "${DEFAULT_QFLAGS} -l mem_per_core=8G -pe omp 8"
  }
}
